const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
//User is the model CLASS that we can use to create a model instance,
// and then save it or persisted to the mongol database
const User = mongoose.model('userModel');
if (process.env.NODE_ENV !== 'production') {
	require('dotenv').config()
};
passport.use(
	new GoogleStrategy({
			clientID: process.env.GOOGLE_CLIENT_ID,
			clientSecret: process.env.GOOGLE_CLIENT_SECRET,
			//clientID: keys.googleClientID,
			//clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback'
		},
		(accessToken, refreshToken, profile, done) => {
			//This query attends to find one record in the
			//User collection, where googleID is same a profile.id
			//Note: any time we initiate communication with the database, we initiate an asyncronous action
			User.findOne({
					googleID: profile.id
				})
				//Existing user will be a repesentation of an instance of a User who was found
				.then((existingUser) => {
					if (existingUser) {
						//record exist with the current profile id
						done(null, existingUser);
					} else {
						//we don't have a new record with this id. Make a new record.
						//Creates an instance of a User
						new User({
								googleID: profile.id
							})
							.save()
							//This user is an more polish user retrive from the promise.
							//This is the "perfect" instance of our User model
							.then(user => done(null, user));
					}
				});
		}
	)
);
//This is what we pull out of our database from our findOne query promise
//serializeUser uses database user.id (identifying peice of information 
//not the google.id) and puts it into a cookie.
//After a user has sign in with google, we do not care anymore about this id
//We only care about the db user id.
passport.serializeUser((user, done) => {
	//user.id an unique id generated by our database, to identify this particular user record
	//we put this into the cookie
	done(null, user.id);
});
//Get the cookie and converted into the db user.id to identify the user
passport.deserializeUser((id, done) => {
	//access db is always an asyncronous action and we assume it returns a promise
	//which is resolved after the user with the given id is found
	User.findById(id)
		.then(user => {
			done(null, user);
		})
});